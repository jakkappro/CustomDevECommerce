// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ExpandoConnector.DTO.UpdateFufillment;
//
//    var updateFufillmentRequest = UpdateFufillmentRequest.FromJson(jsonString);

namespace ExpandoConnector.DTO.UpdateFufillment;

using System;
using System.Globalization;
using System.Text.Json;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

public partial class UpdateFufillmentRequest
{
    [JsonProperty("marketplaceOrderId", Required = Required.Always)]
    public string MarketplaceOrderId { get; set; }

    [JsonProperty("marketplace", Required = Required.Always)]
    public string Marketplace { get; set; }

    [JsonProperty("status", Required = Required.Always)]
    public string Status { get; set; }

    [JsonProperty("trackingNumber", Required = Required.Always)]
    [Newtonsoft.Json.JsonConverter(typeof(ParseStringConverter))]
    public long TrackingNumber { get; set; }

    [JsonProperty("carrier", Required = Required.Always)]
    public string Carrier { get; set; }

    [JsonProperty("carrierName")]
    public string CarrierName { get; set; }
}

public partial class UpdateFufillmentRequest
{
    public static UpdateFufillmentRequest FromJson(string json) => JsonConvert.DeserializeObject<UpdateFufillmentRequest>(json, ExpandoConnector.DTO.UpdateFufillment.Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this UpdateFufillmentRequest self) => JsonConvert.SerializeObject(self, ExpandoConnector.DTO.UpdateFufillment.Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters =
        {
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
    };
}

internal class ParseStringConverter : Newtonsoft.Json.JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
    {
        if (reader.TokenType == JsonToken.Null) return null;
        var value = serializer.Deserialize<string>(reader);
        long l;
        if (Int64.TryParse(value, out l))
        {
            return l;
        }
        throw new Exception("Cannot unmarshal type long");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, Newtonsoft.Json.JsonSerializer serializer)
    {
        if (untypedValue == null)
        {
            serializer.Serialize(writer, null);
            return;
        }
        var value = (long)untypedValue;
        serializer.Serialize(writer, value.ToString());
        return;
    }

    public static readonly ParseStringConverter Singleton = new ParseStringConverter();
}